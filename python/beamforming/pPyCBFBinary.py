#!/usr/bin/env python

import time
import struct
import numpy as np
from cbf import CBF
import pymoos

class PyCBF(object):

	def __init__(self):
		''' MOOSApp Attributes '''
		self.server_host = 'localhost'		#MOOSDB IP - eventually a .moos parser should be written for Python to do this stuff
		self.server_port = 9000				#MOOSDB Port
		self.moos_app_name = 'PyCBF'		#MOOSApp name
		self.time_warp = 1					#timewarp for simulation

		''' Beamformer Attributes '''
		self.pos = np.zeros([4,3])			#hydrophone array element positions (x,y,z) - SandShark has 4 array elements
		self.pos[0,:] = [0.03143,  0,        0      ]
		self.pos[1,:] = [0,        0,        0.02223]
		self.pos[2,:] = [0,       -0.01925, -0.01111]
		self.pos[3,:] = [0,        0.01925, -0.01111]
		self.replica = np.array([[0,-0.000137288508036909,-0.000605008396217507,-0.000532619761201532,7.30570371430197e-05,0.000655887681590749,0.000729382820123117,0.000219634728023222,-0.000599315290044504,-0.00113727714182072,-0.000707071974371972,0.000672354831727586,0.00175726495268629,0.00113172262294439,-0.000931476859470735,-0.00231969641329373,-0.00135627351115528,0.00113042687005124,0.00260409385558824,0.00155994389405757,-0.000996061120528721,-0.00270081565056451,-0.00202531084486292,0.000539533540742002,0.00287480261021655,0.00279891053703840,-4.01054105358446e-06,-0.00322154511791506,-0.00366053735614722,-0.000461561433603304,0.00356144754026444,0.00441287649339247,0.000969668685895899,-0.00367924756168184,-0.00509363006611200,-0.00171247417628988,0.00356348157177513,0.00585252845624514,0.00271069765966633,-0.00333832668314863,-0.00670007010364582,-0.00383308804008439,0.00301910961193180,0.00748357048839760,0.00503005544823118,-0.00244773650258706,-0.00810586265000501,-0.00643781166300047,0.00149043376816366,0.00866757575752801,0.00820973777531299,-0.000214298574691894,-0.00933662795572030,-0.0103129441235403,-0.00119696093110796,0.0101289573520925,0.0125608955150868,0.00266396080530174,-0.0108887686637216,-0.0148203650051768,-0.00427832451557583,0.0114673308901023,0.0171133432529144,0.00616113305927857,-0.0118444964067747,-0.0195142448493428,-0.00833707187186506,0.0120588053632113,0.0220304386634661,0.0107816608819641,-0.0120984251456825,-0.0246372605457310,-0.0135219437308764,0.0119312944436767,0.0273759654132723,0.0166084009451432,-0.0116067543229008,-0.0303292052879172,-0.0200046557560277,0.0112392705961644,0.0334999417778340,0.0235892486535452,-0.0108779512112203,-0.0367927126776017,-0.0272907627653832,0.0104633144196282,0.0401463802380161,0.0311563545984632,-0.00995006945677707,-0.0436253360462632,-0.0352453640208242,0.00941558054262160,0.0473334005646828,0.0395105747302425,-0.00899458938328484,-0.0512916914005781,-0.0438456547456123,0.00875845134845105,0.0554737530046904,0.0482037389221451,-0.00874361861942634,-0.0599255647549793,-0.0525729563068278,0.00907926861548438,0.0647476598517997,0.0568361319846349,-0.00998329173963126,-0.0699418426547405,-0.0607523221896140,0.0116014813651887,0.0753644969378582,0.0641162036218553,-0.0139319137358981,-0.0808759521044440,-0.0668593715959209,0.0169584607919441,0.0864631793437289,0.0689363104148869,-0.0207913521624793,-0.0921489531736166,-0.0701698363540060,0.0256042635583195,0.0978301655338436,0.0702825751516912,-0.0314762847871145,-0.103279721585935,-0.0690397449001091,0.0383736890841399,0.108267643336596,0.0662731831201649,-0.0462527172350195,-0.112578847312653,-0.0617846455132194,0.0550685003487225,0.115908437728919,0.0553371172876734,-0.0646553669757955,-0.117839092359542,-0.0467848564917065,0.0746803787058416,0.117969042444591,0.0361426590517426,-0.0847591108946104,-0.115994230413523,-0.0234814007043022,0.0945424674433214,0.111603733094007,0.00883179401526901,-0.103601363012866,-0.104354192337892,0.00769490272917353,0.111248514569128,0.0937678409006908,-0.0256689663023034,-0.116572839310023,-0.0796072843247118,0.0442822197204142,0.118702949031985,0.0620288836693854,-0.0625501904227800,-0.117017598396388,-0.0414656780253142,0.0795279750750647,0.111098199895360,0.0184409855089027,-0.0942915013451776,-0.100568337287364,0.00640876195821775,0.105767418845159,0.0851160549829001,-0.0321198317108426,-0.112710809428609,-0.0647482489275911,0.0572823189431315,0.113945252530320,0.0400206775647652,-0.0801876659418655,-0.108655051619348,-0.0120323001941171,0.0990880755326884,0.0964991867502966,-0.0177160277852141,-0.112337621613012,-0.0776040530836972,0.0473792796923003,0.118445268101702,0.0526444057946067,-0.0747580310130018,-0.116249483935483,-0.0230095851364290,0.0974410329040553,0.105233035998333,-0.00917970258669671,-0.113153505979808,-0.0857375956128501,0.0412984955835609,0.120079993335255,0.0589466909710117,-0.0704776644748033,-0.117006911568462,-0.0268294011775929,0.0937306467152134,0.103473641919670,-0.00777497487286286,-0.108149823180867,-0.0801485411504670,0.0411522188712343,0.111459453207025,0.0492138052258942,-0.0691734451332426,-0.102762584623347,-0.0142761034265691,0.0881685822077607,0.0829378380603752,-0.0202963816605456,-0.0956728979684826,-0.0544333561579472,0.0501414918190729,0.0906789750535214,0.0208149953736468,-0.0713530132729718,-0.0736404564702108,0.0135052564008868,0.0807834914181362,0.0466417992770234,-0.0434953996775700,-0.0766261932479841,-0.0136228817342978,0.0641630165701069,0.0592212203948167,-0.0198932400639754,-0.0717142643010496,-0.0314922383921629,0.0478150994507088,0.0646614927625978,-0.00142059362295617,-0.0648385830198896,-0.0443203934224572,0.0331549091801972,0.0675819241636825,0.0146491503897497,-0.0573122311358869,-0.0553167378749076,0.0183345063531009,0.0686582606816286,0.0303555168461766,-0.0475128526372259,-0.0643375692869475,0.00203603152517044,0.0660954902049413,0.0448603065547500,-0.0344909689158874,-0.0693115241407531,-0.0143746730573763,0.0591525045718404,0.0558036272120475,-0.0200468455216787,-0.0695926103020860,-0.0282296708009262,0.0499263350391870,0.0624971925704539,-0.00706021282001687,-0.0673358792531340,-0.0387863573091672,0.0412250455049941,0.0669893549682704,0.00389980536276136,-0.0649860108203617,-0.0480656514632065,0.0331288110614260,0.0712780194116831,0.0150483231364591,-0.0619700668103665,-0.0576987005674861,0.0230998359805271,0.0741247938287295,0.0276757673701396,-0.0554191656263678,-0.0657205656712672,0.0102554408668327,0.0722451911554068,0.0389311331325494,-0.0448132740485429,-0.0681990257764572,-0.00162851413712319,0.0652135365564603,0.0440799841610610,-0.0346048641689130,-0.0645231177566672,-0.00716632664845829,0.0577962413064987,0.0423169551924984,-0.0304836716022245,-0.0596113912406665,-0.00558857870117817,0.0557635527411673,0.0387987205434052,-0.0330102647891516,-0.0593256405373561,-0.00236822126106572,0.0595052481470084,0.0395147580029029,-0.0365019470323090,-0.0639650658709794,-0.00349458776799767,0.0632830810029576,0.0445971896769620,-0.0351500795297174,-0.0677265345075556,-0.00878584375050744,0.0614754797441533,0.0480629290801821,-0.0294231458316791,-0.0650298214919622,-0.0121193802907434,0.0546125174884595,0.0443471336131854,-0.0253076215644474,-0.0563136179019632,-0.00818257258729022,0.0482833369634151,0.0339228216159144,-0.0275737273997391,-0.0467853868765865,0.00226394816708358,0.0466760096285327,0.0218293376787673,-0.0351183174529733,-0.0402634242752464,0.0142627580015911,0.0485725806451441,0.0116805122521898,-0.0432671858190391,-0.0356777058130236,0.0245050534102478,0.0498958744418343,0.00260250204775829,-0.0492907543024347,-0.0297292000827177,0.0338189177236106,0.0487365594307404,-0.00791315141217303,-0.0541746472772621,-0.0214873456214975,0.0439955765116354,0.0464729561601007,-0.0196993644402411,-0.0591897821475157,-0.0130361108899036,0.0537941525508788,0.0442761788871321,-0.0297197368225757,-0.0623832708347978,-0.00595788275941927,0.0593500471769198,0.0401246735681832,-0.0357712871190622,-0.0596371814355868,0.00133513769587059,0.0581805901312788,0.0302994258038756,-0.0390571533025542,-0.0488372261304175,0.0119578453376555,0.0516531062221660,0.0134520948948495,-0.0424946131763167,-0.0320689272396278,0.0267076839674007,0.0431663509366923,-0.00755098194182853,-0.0470428545716183,-0.0136324273103749,0.0425019264289051,0.0346037148205209,-0.0277050801220045,-0.0503451162201724,0.00334434446451519,0.0544749580436610,0.0251631474604988,-0.0430885484797417,-0.0488298727183080,0.0179642281216791,0.0590927743847363,0.0133531001999067,-0.0519827420776006,-0.0406565861723738,0.0299364375092486,0.0553801669388812,-0.000534215545170727,-0.0537934274912456,-0.0267642722270853,0.0378757152176392,0.0441660799859621,-0.0139690591599271,-0.0480153606742324,-0.00993344588101377,0.0395093504176561,0.0271768867866164,-0.0235840649089395,-0.0346319756411668,0.00647023834139166,0.0332399535927846,0.00702146485976255,-0.0267125805095056,-0.0152058662429659,0.0190983126460830,0.0193980344098249,-0.0125758404236592,-0.0221540825725644,0.00670691153640092,0.0250288619999663,0.000513790338847797,-0.0272535039996537,-0.0105625148767394,0.0261379060333084,0.0226037779883666,-0.0189549643046556,-0.0331907439305610,0.00517091691158841,0.0377702154113911,0.0123895854746094,-0.0332421770436449,-0.0283459369833256,0.0200721892210872,0.0373101597346789,-0.00251471225156836,-0.0367719929368104,-0.0134596245348318,0.0284521683607153,0.0234035596369831,-0.0170650926304076,-0.0266792690219132,0.00718933840563684,0.0261459131983073,-0.000421710644577824,-0.0254383321340694,-0.00508835460970434,0.0258943287841281,0.0124051336635679,-0.0255134517714787,-0.0226866366792501,0.0207163063197391,0.0336816175061659,-0.00941434324005337,-0.0409684499438808,-0.00707873012522842,0.0408073337629862,0.0246534926665872,-0.0323132797003466,-0.0387587843189574,0.0175031387804176,0.0465031092707579,0.000313073271717217,-0.0471311007036468,-0.0181522071165474,0.0411581471314220,0.0338316575529562,-0.0294647056784166,-0.0455323975599266,0.0132170823483134,0.0514901011396631,0.00568803283643188,-0.0503959936913343,-0.0245322588080921,0.0420911481335048,0.0403948810334377,-0.0277738210473658,-0.0509741601589772,0.00952814225396298,0.0549240881680763,0.0102680498407207,-0.0516716232293258,-0.0290990121541222,0.0413129152362628,0.0441930976795205,-0.0249996629642566,-0.0528213859409274,0.00541098924054715,0.0533241967942722,0.0135551511757384,-0.0462270617405832,-0.0281893220461752,0.0343463631650833,0.0366897351814458,-0.0214381534789652,-0.0398728173457765,0.0101872141529313,0.0402220027849781,-0.000987536119299634,-0.0399425557012929,-0.00762124737295858,0.0394716447391687,0.0173064609546564,-0.0374563905009185,-0.0284013598937580,0.0320059998178376,0.0395307759360744,-0.0221249839954258,-0.0484299235927036,0.00832351034829583,0.0531266158921136,0.00777189547934327,-0.0526185574774111,-0.0242242510644783,0.0468027928319061,0.0393094386110865,-0.0360557552235091,-0.0515162523187433,0.0210174814702483,0.0593198440222018,-0.00279562643250343,-0.0612092493283010,-0.0166710468772220,0.0561973352112964,0.0345866525504903,-0.0445769813346309,-0.0479342779153386,0.0283515250242181,0.0546135693728807,-0.0108327588429262,-0.0544390931093039,-0.00459689813463496,0.0492725372144805,0.0159189605375626,-0.0420470816958531,-0.0231982541987106,0.0352250410797728,0.0280926467866903,-0.0296913332314982,-0.0325269187056635,0.0247710034452423,0.0375159947073740,-0.0191685707299575,-0.0429114483970140,0.0119316949962843,0.0479754488348325,-0.00268830618221400,-0.0519731543282638,-0.00874840837130083,0.0541158294479864,0.0226181592892877,-0.0530427063681018,-0.0386919635688012,0.0467159844824527,0.0553075146175183,-0.0333609592447975,-0.0690101711625307,0.0130604117095808,0.0755924017066500,0.0112381960833447,-0.0722032385993975,-0.0343647220748042,0.0591736395267291,0.0511222121900729,-0.0401997241398330,-0.0587320991655233,0.0206118572809621,0.0579525965307392,-0.00480037633346503,-0.0521916033968188,-0.00556168395475359,0.0453213844856452,0.0114825338562391,-0.0397400222187820,-0.0151231716191266,0.0358982727188964,0.0181372272772400,-0.0332731757875000,-0.0211753481812143,0.0315877493969834,0.0247007984412718,-0.0309437374296570,-0.0299512408897365,0.0306639138435371,0.0386003136812883,-0.0281350159338874,-0.0508681801424114,0.0193828922082912,0.0636127354383989,-0.00179526896021187,-0.0706165276500700,-0.0227783389501146,0.0658652267002832,0.0473857534180234,-0.0479503031108796,-0.0632070712341869,0.0221298625764148,0.0649493190503557,0.00216609129287548,-0.0544438827991510,-0.0170969308977162,0.0393897506798428,0.0212381966977446,-0.0278891385896470,-0.0196691248195633,0.0229454532404788,0.0192274634982816,-0.0212830658111563,-0.0228470060675896,0.0172988313517968,0.0276746713563092,-0.00861273226877925,-0.0283931784982268,-0.00163859998425692,0.0226389856838121,0.00769089837459245,-0.0136129886793952,-0.00652707116769839,0.00754987022771863,0.000852114016267638,-0.00834235203896806,0.00301787394558650,0.0141422150935643,-0.000461121630980317,-0.0189332495993324,-0.00764982254850857,0.0176051511418587,0.0159027905162784,-0.0100247132598486,-0.0190094738418783,0.000682135163435171,0.0159445878781791,0.00543961255384072,-0.0100660199330899,-0.00685963487424609,0.00553006570262362,0.00598774179737913,-0.00358685700006995,-0.00597444738659279,0]])
		self.nfft = 512						#number of DFT bins for frequency transform of incoming signal
		self.nsamples = 8000				#number of samples in incoming signal
		self.freq_lower = 6000.0			#lower frequency for frequency range of Chirp-Z-Transform (performs frequency transform over small freq range)
		self.freq_upper = 10000.0			#upper frequency for frequency range of Chirp-Z-Transform
		self.freq_sampling = 37500.0		#sampling frequency
		self.range_good = False
		self.azimuth_good = False

		''' Initialize Conventional Phased-Array 3D Beamformer Object '''
		self.CBF = CBF(self.pos, self.replica, self.freq_sampling, self.freq_lower, self.freq_upper, self.nfft, self.nsamples)
		self.data = np.zeros((self.nsamples, self.pos.shape[0]))
		self.data_new = None
		self.new = False
		self.count = 0
		self.timestart = 0

		''' Initialzie Python-MOOS Communications '''
		self.comms = pymoos.comms()
		self.comms.set_on_connect_callback(self.on_connect)
		self.comms.add_active_queue('cbf_queue', self.on_new_acoustic_binary_data)			#let's use a queue callback instead to handle distinct messages
		self.comms.add_message_route_to_active_queue('cbf_queue', 'DAQ_BINARY_DATA')		#route 'DAQ_BINARY_DATA' messages to on_new_acoustic_binary_data function
		self.comms.run(self.server_host, self.server_port, self.moos_app_name)
		pymoos.set_moos_timewarp(self.time_warp)

	def run(self):
		while True:
			if self.new:
				self.timestart = time.time()

				print 'Processing acoustic binary data...'

				self.new = False
				self.data[:] = self.data_new
				self.data = self.data-np.mean(self.data,0)									#subtract any offset
				self.CBF.run(self.data)														#run the beamformer

				print 'Processed acoustic binary data in ' + str(time.time()-self.timestart) + ' seconds.'
				print 'Azimuth: ' + str(self.CBF.cbf_output_max_azimuth*180/np.pi) + ' | Elevation: ' + str(self.CBF.cbf_output_max_elevation*180/np.pi) + ' | Range: ' + str(self.CBF.cbf_output_max_range)

				self.comms.notify('CBF_RANGE', self.CBF.cbf_output_max_range, pymoos.time())
				self.comms.notify('CBF_RANGE_VARIANCE', self.CBF.cbf_output_var_range, pymoos.time())
				self.comms.notify('CBF_ELEVATION_DEG', self.CBF.cbf_output_max_elevation*180/np.pi, pymoos.time())
				self.comms.notify('CBF_AZIMUTH_DEG', self.CBF.cbf_output_max_azimuth*180/np.pi, pymoos.time())
				self.comms.notify('CBF_COUNT', self.count, pymoos.time())
				if (self.CBF.cbf_output_var_range <= 5.0):
					self.comms.notify('CBF_RANGE_GOOD', 1, pymoos.time())
					self.range_good = True
				else:
					self.comms.notify('CBF_RANGE_GOOD', 0, pymoos.time())
					self.range_good = False
				if (self.CBF.cbf_output_max_azimuth*180/np.pi <= 95 or self.CBF.cbf_output_max_azimuth*180/np.pi >= 265):
					self.comms.notify('CBF_AZIMUTH_GOOD', 1, pymoos.time())
					self.azimuth_good = True
				else:
					self.comms.notify('CBF_AZIMUTH_GOOD', 0, pymoos.time())
					self.azimuth_good = False
				if (self.range_good and self.azimuth_good):
					self.comms.notify('CBF_GOOD', 1, pymoos.time())
				else:
					self.comms.notify('CBF_GOOD', 0, pymoos.time())
				self.count = self.count + 1
			else:
				time.sleep(0.01)

	def on_connect(self):
		''' On connection to MOOSDB, register for desired MOOS variables (allows for * regex) e.g. register('variable', 'community', 'interval')
		self.comms.register('NODE_*_PING','NODE_*',0) '''
		self.comms.register('DAQ_BINARY_DATA', 0)	#register for acoustic binary data
		return True

	def on_new_acoustic_binary_data(self, msg):
		''' Queue callback function to handle 'DAQ_BINARY_DATA' messages specifically; it has the same accessors a regular mail callback:
		msg.trace(), msg.time(), msg.name(), msg.key(), msg.is_name(), msg.source(), msg.is_double(), msg.double(), msg.double_aux(),
		msg.is_string(), msg.string(), msg.is_binary(), msg.binary_data(), msg.binary_data_size(), msg.mark_as_binary() '''
		msg_binary = msg.binary_data()
		try:
			msg_tuple = struct.unpack('%sf' % self.pos.shape[0]*self.nsamples, msg_binary)	
			self.data_new = np.ndarray((self.nsamples, self.pos.shape[0]), buffer=np.array(msg_tuple))
			self.new = True
		except Exception, e:
			print 'Error occurred attempting to beamform acoustic binary data:'
			print str(e)
		return True	

pycbf = PyCBF()
pycbf.run()
