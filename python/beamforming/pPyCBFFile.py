#!/usr/bin/env python

import time
import numpy as np
from successive_cbf import CBF
import pymoos

from scipy import signal	#generate simulated chirp

class PyCBF(object):

	def __init__(self):
		''' MOOSApp Attributes '''
		self.server_host = 'localhost'		#IP information - eventually a .moos parser should be written for Python to do this stuff
		self.server_port = 9000
		self.moos_app_name = 'PyCBF'
		self.time_warp = 1					#timewarp for simulation
		self.acoustic_filepath = None		#filepath of latest acoustic reading
		self.nav_heading = None
		self.nav_x = None
		self.nav_y = None

		''' Beamformer Attributes '''
		self.pos = np.zeros([4,3])			#hydrophone array element positions (x,y,z) - SandShark has 4 array elements
		self.pos[0,:] = [0.03143,  0,        0      ]
		self.pos[1,:] = [0,        0,        0.02223]
		self.pos[2,:] = [0,       -0.01925, -0.01111]
		self.pos[3,:] = [0,        0.01925, -0.01111]
		self.replica = np.array([[-0.0670000000000000,-0.00610000000000000,0.0609000000000000,0.0390000000000000,-0.0363000000000000,-0.0559000000000000,0.00310000000000000,0.0525000000000000,0.0258000000000000,-0.0320000000000000,-0.0401000000000000,0.00420000000000000,0.0357000000000000,0.0188000000000000,-0.0161000000000000,-0.0268000000000000,-0.00850000000000000,0.0164000000000000,0.0255000000000000,0.00770000000000000,-0.0249000000000000,-0.0339000000000000,0.00390000000000000,0.0480000000000000,0.0308000000000000,-0.0392000000000000,-0.0649000000000000,0.00540000000000000,0.0814000000000000,0.0443000000000000,-0.0675000000000000,-0.0919000000000000,0.0216000000000000,0.116100000000000,0.0447000000000000,-0.101600000000000,-0.108700000000000,0.0463000000000000,0.144200000000000,0.0353000000000000,-0.132500000000000,-0.115700000000000,0.0709000000000000,0.163500000000000,0.0237000000000000,-0.156000000000000,-0.118800000000000,0.0895000000000000,0.177600000000000,0.0165000000000000,-0.173300000000000,-0.124700000000000,0.101500000000000,0.192700000000000,0.0163000000000000,-0.189900000000000,-0.137500000000000,0.110500000000000,0.214200000000000,0.0211000000000000,-0.211400000000000,-0.157400000000000,0.122300000000000,0.244300000000000,0.0263000000000000,-0.242000000000000,-0.181200000000000,0.142100000000000,0.281800000000000,0.0262000000000000,-0.282500000000000,-0.204100000000000,0.172500000000000,0.323100000000000,0.0172000000000000,-0.331100000000000,-0.221900000000000,0.213500000000000,0.364900000000000,-0.00220000000000000,-0.385700000000000,-0.232400000000000,0.264600000000000,0.404800000000000,-0.0330000000000000,-0.445100000000000,-0.233800000000000,0.326300000000000,0.441200000000000,-0.0776000000000000,-0.508700000000000,-0.222400000000000,0.400000000000000,0.470400000000000,-0.139600000000000,-0.574200000000000,-0.192600000000000,0.486300000000000,0.485800000000000,-0.223300000000000,-0.636000000000000,-0.136500000000000,0.582400000000000,0.477300000000000,-0.330300000000000,-0.683400000000000,-0.0475000000000000,0.679400000000000,0.433200000000000,-0.456200000000000,-0.701900000000000,0.0764000000000000,0.762800000000000,0.344900000000000,-0.589600000000000,-0.676700000000000,0.230100000000000,0.814300000000000,0.209000000000000,-0.712700000000000,-0.596000000000000,0.400300000000000,0.815300000000000,0.0309000000000000,-0.803300000000000,-0.454800000000000,0.566000000000000,0.750600000000000,-0.174800000000000,-0.838600000000000,-0.257500000000000,0.701300000000000,0.612200000000000,-0.384700000000000,-0.798600000000000,-0.0194000000000000,0.777300000000000,0.402400000000000,-0.566700000000000,-0.670400000000000,0.231600000000000,0.767100000000000,0.138300000000000,-0.684000000000000,-0.454900000000000,0.456000000000000,0.653100000000000,-0.146600000000000,-0.702600000000000,-0.171800000000000,0.608800000000000,0.435500000000000,-0.404800000000000,-0.601100000000000,0.139000000000000,0.649600000000000,0.137700000000000,-0.583700000000000,-0.380100000000000,0.422100000000000,0.553900000000000,-0.193900000000000,-0.636500000000000,-0.0668000000000000,0.616800000000000,0.322500000000000,-0.495100000000000,-0.535200000000000,0.284600000000000,0.668900000000000,-0.0122000000000000,-0.695000000000000,-0.281500000000000,0.598900000000000,0.546600000000000,-0.385900000000000,-0.731400000000000,0.0845000000000000,0.793200000000000,0.255600000000000,-0.709000000000000,-0.571300000000000,0.483400000000000,0.798600000000000,-0.150700000000000,-0.886500000000000,-0.230200000000000,0.809300000000000,0.586500000000000,-0.573900000000000,-0.847300000000000,0.219700000000000,0.958000000000000,0.188500000000000,-0.892700000000000,-0.573800000000000,0.659500000000000,0.862200000000000,-0.299900000000000,-0.998000000000000,-0.120100000000000,0.954500000000000,0.523200000000000,-0.739300000000000,-0.835300000000000,0.391800000000000,1,0.0246000000000000,-0.989000000000000,-0.434500000000000,0.806200000000000,0.765500000000000,-0.486700000000000,-0.960600000000000,0.0889000000000000,0.988800000000000,0.316200000000000,-0.849100000000000,-0.658600000000000,0.570100000000000,0.881100000000000,-0.203600000000000,-0.949300000000000,-0.184800000000000,0.856600000000000,0.528000000000000,-0.624600000000000,-0.768900000000000,0.298400000000000,0.870100000000000,0.0620000000000000,-0.820000000000000,-0.392500000000000,0.634400000000000,0.636700000000000,-0.352900000000000,-0.755900000000000,0.0309000000000000,0.736100000000000,0.270800000000000,-0.590200000000000,-0.498300000000000,0.354600000000000,0.615300000000000,-0.0809000000000000,-0.609600000000000,-0.175200000000000,0.494400000000000,0.366000000000000,-0.304600000000000,-0.461600000000000,0.0870000000000000,0.455500000000000,0.110400000000000,-0.363600000000000,-0.250200000000000,0.218500000000000,0.312500000000000,-0.0604000000000000,-0.297700000000000,-0.0739000000000000,0.224000000000000,0.159000000000000,-0.120300000000000,-0.185700000000000,0.0176000000000000,0.160500000000000,0.0592000000000000,-0.101700000000000,-0.0966000000000000,0.0326000000000000,0.0938000000000000,0.0256000000000000,-0.0609000000000000,-0.0585000000000000,0.0142000000000000,0.0619000000000000,0.0294000000000000,-0.0405000000000000,-0.0572000000000000,0.00500000000000000,0.0631000000000000,0.0317000000000000,-0.0485000000000000,-0.0586000000000000,0.0204000000000000,0.0695000000000000,0.0118000000000000,-0.0638000000000000,-0.0392000000000000,0.0454000000000000,0.0559000000000000,-0.0209000000000000,-0.0600000000000000,-0.00270000000000000,0.0534000000000000,0.0204000000000000,-0.0406000000000000,-0.0299000000000000,0.0267000000000000,0.0322000000000000,-0.0156000000000000,-0.0302000000000000,0.00900000000000000,0.0278000000000000,-0.00600000000000000,-0.0278000000000000,0.00400000000000000,0.0311000000000000,0.000300000000000000,-0.0360000000000000,-0.00950000000000000,0.0393000000000000,0.0237000000000000,-0.0368000000000000,-0.0406000000000000,0.0254000000000000,0.0551000000000000,-0.00480000000000000,-0.0615000000000000,-0.0219000000000000,0.0550000000000000,0.0479000000000000,-0.0342000000000000,-0.0651000000000000,0.00280000000000000,0.0665000000000000,0.0312000000000000,-0.0490000000000000,-0.0569000000000000,0.0159000000000000,0.0647000000000000,0.0233000000000000,-0.0492000000000000,-0.0553000000000000,0.0131000000000000,0.0669000000000000,0.0328000000000000,-0.0505000000000000,-0.0726000000000000,0.00760000000000000,0.0894000000000000,0.0502000000000000,-0.0724000000000000,-0.104100000000000,0.0211000000000000,0.133300000000000,0.0528000000000000,-0.122600000000000,-0.128100000000000,0.0683000000000000]])
		self.nfft = 512						#number of DFT bins for frequency transform of incoming signal
		self.nsamples = 8000				#number of samples in incoming signal
		self.freq_lower = 6500.0			#lower frequency for frequency range of Chirp-Z-Transform (performs frequency transform over small freq range)
		self.freq_upper = 9500.0			#upper frequency for frequency range of Chirp-Z-Transform
		self.freq_sampling = 37500.0		#sampling frequency
		###self.replica = np.array([signal.chirp(np.linspace(0,0.005,187),self.freq_lower,0.005,self.freq_upper)])	#simulated chirp

		''' Initialize Conventional Phased-Array Beamformer Object '''
		self.CBF = CBF(self.pos, self.replica, self.freq_sampling, self.freq_lower, self.freq_upper, self.nfft, self.nsamples)

		''' Initialzie Python-MOOS Communications '''
		self.comms = pymoos.comms()
		self.comms.set_on_connect_callback(self.on_connect)
		self.comms.add_active_queue('cbf_queue', self.on_new_acoustic_file)		#let's use a queue callback instead to handle distinct messages
		self.comms.add_message_route_to_active_queue('cbf_queue', 'NEW_FILE')	#route 'NEW_FILE' messages to on_new_acoustic_file function
		self.comms.set_on_mail_callback(self.on_mail)
		self.comms.run(self.server_host, self.server_port, self.moos_app_name)
		pymoos.set_moos_timewarp(self.time_warp)

	def run(self):
		''' Since this MOOSApp simply processes files as they come in using callbacks, the main loop does nothing '''
		while True:
			time.sleep(1)

	def on_connect(self):
		''' On connection to MOOSDB, register for desired MOOS variables (allows for * regex) e.g. register('variable', 'community', 'interval')
		self.comms.register('NODE_*_PING','NODE_*',0) '''
		self.comms.register('NEW_FILE', 0)	#register for acoustic filepath
		self.comms.register('NAV_X', 0)
		self.comms.register('NAV_Y', 0)
		self.comms.register('NAV_HEADING', 0)
		return True

	def on_mail(self):
		''' On receipt of new mail with MOOS variables we are interested in, parse the mail with possible accessors:
		msg.trace(), msg.time(), msg.name(), msg.key(), msg.is_name(), msg.source(), msg.is_double(), msg.double(), msg.double_aux(),
		msg.is_string(), msg.string(), msg.is_binary(), msg.binary_data(), msg.binary_data_size(), msg.mark_as_binary() '''
		msg_vector = self.comms.fetch()
		for msg in msg_vector:
			if msg.key() == 'NAV_X':
				self.nav_x = msg.double()
			elif msg.key() == 'NAV_Y':
				self.nav_y = msg.double()
			elif msg.key() == 'NAV_HEADING':
				self.nav_heading = msg.double()
		return True

	def on_new_acoustic_file(self, msg):
		''' Queue callback function to handle 'NEW_FILE' messages specifically; it has the same accessors a regular mail callback:
		msg.trace(), msg.time(), msg.name(), msg.key(), msg.is_name(), msg.source(), msg.is_double(), msg.double(), msg.double_aux(),
		msg.is_string(), msg.string(), msg.is_binary(), msg.binary_data(), msg.binary_data_size(), msg.mark_as_binary() '''
		self.acoustic_filepath = msg.string()
		try:
			curr_head = self.nav_heading

			time.sleep(0.5)
			timestart = time.time()

			data = np.loadtxt(self.acoustic_filepath, delimiter=',')	#load the data from the textfile
			data = data-np.mean(data,0)									#subtract any offset
			self.CBF.run(data)											#run the beamformer

			print 'Processed ' + self.acoustic_filepath + ' in ' + str(time.time()-timestart) + ' seconds.'

			''' visualize beamforming output in pMarineViewer '''
			self.comms.notify('CBF_RANGE', self.CBF.cbf_output_max_range, pymoos.time())
			self.comms.notify('CBF_RANGE_VARIANCE', self.CBF.cbf_output_var_range, pymoos.time())
			self.comms.notify('CBF_ELEVATION_DEG', self.CBF.cbf_output_max_elevation*180/np.pi, pymoos.time())
			self.comms.notify('CBF_AZIMUTH_DEG', self.CBF.cbf_output_max_azimuth*180/np.pi, pymoos.time())
			print 'OWNSHIP', self.nav_x, self.nav_y, self.nav_heading
			source_x = self.CBF.cbf_output_max_range*np.sin(self.CBF.cbf_output_max_elevation)*np.cos(self.CBF.cbf_output_max_azimuth)
			source_y = self.CBF.cbf_output_max_range*np.sin(self.CBF.cbf_output_max_elevation)*np.sin(self.CBF.cbf_output_max_azimuth)
			#rotate around z axis by -heading deg -> estimate of ownship position from source (source is origin)
			heading = (-curr_head+90)*np.pi/180
			temp_x = source_x*np.cos(heading) - source_y*np.sin(heading)
			temp_y = source_x*np.sin(heading) + source_y*np.cos(heading)
			source_x = temp_x
			source_y = temp_y
			#translate by ownship x,y
			# source_x = source_x + self.nav_x
			# source_y = source_y + self.nav_y
			self.comms.notify('VIEW_MARKER','type=square,x='+str(source_x)+',y='+str(source_y)+',scale=4.3,color=red,width=4.5')
			print 'SOURCE', source_x, source_y
			
		except Exception, e:
			print 'Error occurred attempting to beamform ' + self.acoustic_filepath +':'
			print str(e)
		return True

pycbf = PyCBF()
pycbf.run()